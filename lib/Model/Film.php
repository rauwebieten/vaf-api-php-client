<?php
/**
 * Film
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VAF API
 *
 * Private API for VAF partners
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Film Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Film implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'film';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'original_title' => 'string',
'english_title' => 'string',
'film_website' => 'string',
'genre' => 'string',
'original_language' => 'string',
'production_status' => 'string',
'release' => 'string',
'type' => 'string',
'website_launch_date' => 'string',
'year' => 'int',
'art_director' => 'string',
'aspect_ratio' => 'string',
'available_in' => 'string',
'colour' => 'string',
'co_production_partners' => 'string',
'costume' => 'string',
'editing' => 'string',
'makeup' => 'string',
'music' => 'string',
'other_available_formats' => 'string',
'other_name' => 'string',
'other_role' => 'string',
'photography' => 'string',
'release_format' => 'string',
'running_time_film' => 'string',
'running_time_series' => 'string',
'flemish_producer_text' => 'string',
'sound' => 'string',
'sound_format' => 'string',
'supported_by' => 'string',
'synopsis_dutch' => 'string',
'synopsis_english' => 'string',
'synopsis_french' => 'string',
'synopsis_is_other' => 'string',
'tax_shelter_partners' => 'string',
'writers_text' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'original_title' => null,
'english_title' => null,
'film_website' => null,
'genre' => null,
'original_language' => null,
'production_status' => null,
'release' => null,
'type' => null,
'website_launch_date' => null,
'year' => null,
'art_director' => null,
'aspect_ratio' => null,
'available_in' => null,
'colour' => null,
'co_production_partners' => null,
'costume' => null,
'editing' => null,
'makeup' => null,
'music' => null,
'other_available_formats' => null,
'other_name' => null,
'other_role' => null,
'photography' => null,
'release_format' => null,
'running_time_film' => null,
'running_time_series' => null,
'flemish_producer_text' => null,
'sound' => null,
'sound_format' => null,
'supported_by' => null,
'synopsis_dutch' => null,
'synopsis_english' => null,
'synopsis_french' => null,
'synopsis_is_other' => null,
'tax_shelter_partners' => null,
'writers_text' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'original_title' => 'original_title',
'english_title' => 'english_title',
'film_website' => 'film_website',
'genre' => 'genre',
'original_language' => 'original_language',
'production_status' => 'production_status',
'release' => 'release',
'type' => 'type',
'website_launch_date' => 'website_launch_date',
'year' => 'year',
'art_director' => 'art_director',
'aspect_ratio' => 'aspect_ratio',
'available_in' => 'available_in',
'colour' => 'colour',
'co_production_partners' => 'co_production_partners',
'costume' => 'costume',
'editing' => 'editing',
'makeup' => 'makeup',
'music' => 'music',
'other_available_formats' => 'other_available_formats',
'other_name' => 'other_name',
'other_role' => 'other_role',
'photography' => 'photography',
'release_format' => 'release_format',
'running_time_film' => 'running_time_film',
'running_time_series' => 'running_time_series',
'flemish_producer_text' => 'flemish_producer_text',
'sound' => 'sound',
'sound_format' => 'sound_format',
'supported_by' => 'supported_by',
'synopsis_dutch' => 'synopsis_dutch',
'synopsis_english' => 'synopsis_english',
'synopsis_french' => 'synopsis_french',
'synopsis_is_other' => 'synopsis_is_other',
'tax_shelter_partners' => 'tax_shelter_partners',
'writers_text' => 'writers_text'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'original_title' => 'setOriginalTitle',
'english_title' => 'setEnglishTitle',
'film_website' => 'setFilmWebsite',
'genre' => 'setGenre',
'original_language' => 'setOriginalLanguage',
'production_status' => 'setProductionStatus',
'release' => 'setRelease',
'type' => 'setType',
'website_launch_date' => 'setWebsiteLaunchDate',
'year' => 'setYear',
'art_director' => 'setArtDirector',
'aspect_ratio' => 'setAspectRatio',
'available_in' => 'setAvailableIn',
'colour' => 'setColour',
'co_production_partners' => 'setCoProductionPartners',
'costume' => 'setCostume',
'editing' => 'setEditing',
'makeup' => 'setMakeup',
'music' => 'setMusic',
'other_available_formats' => 'setOtherAvailableFormats',
'other_name' => 'setOtherName',
'other_role' => 'setOtherRole',
'photography' => 'setPhotography',
'release_format' => 'setReleaseFormat',
'running_time_film' => 'setRunningTimeFilm',
'running_time_series' => 'setRunningTimeSeries',
'flemish_producer_text' => 'setFlemishProducerText',
'sound' => 'setSound',
'sound_format' => 'setSoundFormat',
'supported_by' => 'setSupportedBy',
'synopsis_dutch' => 'setSynopsisDutch',
'synopsis_english' => 'setSynopsisEnglish',
'synopsis_french' => 'setSynopsisFrench',
'synopsis_is_other' => 'setSynopsisIsOther',
'tax_shelter_partners' => 'setTaxShelterPartners',
'writers_text' => 'setWritersText'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'original_title' => 'getOriginalTitle',
'english_title' => 'getEnglishTitle',
'film_website' => 'getFilmWebsite',
'genre' => 'getGenre',
'original_language' => 'getOriginalLanguage',
'production_status' => 'getProductionStatus',
'release' => 'getRelease',
'type' => 'getType',
'website_launch_date' => 'getWebsiteLaunchDate',
'year' => 'getYear',
'art_director' => 'getArtDirector',
'aspect_ratio' => 'getAspectRatio',
'available_in' => 'getAvailableIn',
'colour' => 'getColour',
'co_production_partners' => 'getCoProductionPartners',
'costume' => 'getCostume',
'editing' => 'getEditing',
'makeup' => 'getMakeup',
'music' => 'getMusic',
'other_available_formats' => 'getOtherAvailableFormats',
'other_name' => 'getOtherName',
'other_role' => 'getOtherRole',
'photography' => 'getPhotography',
'release_format' => 'getReleaseFormat',
'running_time_film' => 'getRunningTimeFilm',
'running_time_series' => 'getRunningTimeSeries',
'flemish_producer_text' => 'getFlemishProducerText',
'sound' => 'getSound',
'sound_format' => 'getSoundFormat',
'supported_by' => 'getSupportedBy',
'synopsis_dutch' => 'getSynopsisDutch',
'synopsis_english' => 'getSynopsisEnglish',
'synopsis_french' => 'getSynopsisFrench',
'synopsis_is_other' => 'getSynopsisIsOther',
'tax_shelter_partners' => 'getTaxShelterPartners',
'writers_text' => 'getWritersText'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['original_title'] = isset($data['original_title']) ? $data['original_title'] : null;
        $this->container['english_title'] = isset($data['english_title']) ? $data['english_title'] : null;
        $this->container['film_website'] = isset($data['film_website']) ? $data['film_website'] : null;
        $this->container['genre'] = isset($data['genre']) ? $data['genre'] : null;
        $this->container['original_language'] = isset($data['original_language']) ? $data['original_language'] : null;
        $this->container['production_status'] = isset($data['production_status']) ? $data['production_status'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['website_launch_date'] = isset($data['website_launch_date']) ? $data['website_launch_date'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['art_director'] = isset($data['art_director']) ? $data['art_director'] : null;
        $this->container['aspect_ratio'] = isset($data['aspect_ratio']) ? $data['aspect_ratio'] : null;
        $this->container['available_in'] = isset($data['available_in']) ? $data['available_in'] : null;
        $this->container['colour'] = isset($data['colour']) ? $data['colour'] : null;
        $this->container['co_production_partners'] = isset($data['co_production_partners']) ? $data['co_production_partners'] : null;
        $this->container['costume'] = isset($data['costume']) ? $data['costume'] : null;
        $this->container['editing'] = isset($data['editing']) ? $data['editing'] : null;
        $this->container['makeup'] = isset($data['makeup']) ? $data['makeup'] : null;
        $this->container['music'] = isset($data['music']) ? $data['music'] : null;
        $this->container['other_available_formats'] = isset($data['other_available_formats']) ? $data['other_available_formats'] : null;
        $this->container['other_name'] = isset($data['other_name']) ? $data['other_name'] : null;
        $this->container['other_role'] = isset($data['other_role']) ? $data['other_role'] : null;
        $this->container['photography'] = isset($data['photography']) ? $data['photography'] : null;
        $this->container['release_format'] = isset($data['release_format']) ? $data['release_format'] : null;
        $this->container['running_time_film'] = isset($data['running_time_film']) ? $data['running_time_film'] : null;
        $this->container['running_time_series'] = isset($data['running_time_series']) ? $data['running_time_series'] : null;
        $this->container['flemish_producer_text'] = isset($data['flemish_producer_text']) ? $data['flemish_producer_text'] : null;
        $this->container['sound'] = isset($data['sound']) ? $data['sound'] : null;
        $this->container['sound_format'] = isset($data['sound_format']) ? $data['sound_format'] : null;
        $this->container['supported_by'] = isset($data['supported_by']) ? $data['supported_by'] : null;
        $this->container['synopsis_dutch'] = isset($data['synopsis_dutch']) ? $data['synopsis_dutch'] : null;
        $this->container['synopsis_english'] = isset($data['synopsis_english']) ? $data['synopsis_english'] : null;
        $this->container['synopsis_french'] = isset($data['synopsis_french']) ? $data['synopsis_french'] : null;
        $this->container['synopsis_is_other'] = isset($data['synopsis_is_other']) ? $data['synopsis_is_other'] : null;
        $this->container['tax_shelter_partners'] = isset($data['tax_shelter_partners']) ? $data['tax_shelter_partners'] : null;
        $this->container['writers_text'] = isset($data['writers_text']) ? $data['writers_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string $original_title original_title
     *
     * @return $this
     */
    public function setOriginalTitle($original_title)
    {
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets english_title
     *
     * @return string
     */
    public function getEnglishTitle()
    {
        return $this->container['english_title'];
    }

    /**
     * Sets english_title
     *
     * @param string $english_title english_title
     *
     * @return $this
     */
    public function setEnglishTitle($english_title)
    {
        $this->container['english_title'] = $english_title;

        return $this;
    }

    /**
     * Gets film_website
     *
     * @return string
     */
    public function getFilmWebsite()
    {
        return $this->container['film_website'];
    }

    /**
     * Sets film_website
     *
     * @param string $film_website film_website
     *
     * @return $this
     */
    public function setFilmWebsite($film_website)
    {
        $this->container['film_website'] = $film_website;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string $genre genre
     *
     * @return $this
     */
    public function setGenre($genre)
    {
        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets original_language
     *
     * @return string
     */
    public function getOriginalLanguage()
    {
        return $this->container['original_language'];
    }

    /**
     * Sets original_language
     *
     * @param string $original_language original_language
     *
     * @return $this
     */
    public function setOriginalLanguage($original_language)
    {
        $this->container['original_language'] = $original_language;

        return $this;
    }

    /**
     * Gets production_status
     *
     * @return string
     */
    public function getProductionStatus()
    {
        return $this->container['production_status'];
    }

    /**
     * Sets production_status
     *
     * @param string $production_status production_status
     *
     * @return $this
     */
    public function setProductionStatus($production_status)
    {
        $this->container['production_status'] = $production_status;

        return $this;
    }

    /**
     * Gets release
     *
     * @return string
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param string $release release
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets website_launch_date
     *
     * @return string
     */
    public function getWebsiteLaunchDate()
    {
        return $this->container['website_launch_date'];
    }

    /**
     * Sets website_launch_date
     *
     * @param string $website_launch_date website_launch_date
     *
     * @return $this
     */
    public function setWebsiteLaunchDate($website_launch_date)
    {
        $this->container['website_launch_date'] = $website_launch_date;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets art_director
     *
     * @return string
     */
    public function getArtDirector()
    {
        return $this->container['art_director'];
    }

    /**
     * Sets art_director
     *
     * @param string $art_director art_director
     *
     * @return $this
     */
    public function setArtDirector($art_director)
    {
        $this->container['art_director'] = $art_director;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string $aspect_ratio aspect_ratio
     *
     * @return $this
     */
    public function setAspectRatio($aspect_ratio)
    {
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets available_in
     *
     * @return string
     */
    public function getAvailableIn()
    {
        return $this->container['available_in'];
    }

    /**
     * Sets available_in
     *
     * @param string $available_in available_in
     *
     * @return $this
     */
    public function setAvailableIn($available_in)
    {
        $this->container['available_in'] = $available_in;

        return $this;
    }

    /**
     * Gets colour
     *
     * @return string
     */
    public function getColour()
    {
        return $this->container['colour'];
    }

    /**
     * Sets colour
     *
     * @param string $colour colour
     *
     * @return $this
     */
    public function setColour($colour)
    {
        $this->container['colour'] = $colour;

        return $this;
    }

    /**
     * Gets co_production_partners
     *
     * @return string
     */
    public function getCoProductionPartners()
    {
        return $this->container['co_production_partners'];
    }

    /**
     * Sets co_production_partners
     *
     * @param string $co_production_partners co_production_partners
     *
     * @return $this
     */
    public function setCoProductionPartners($co_production_partners)
    {
        $this->container['co_production_partners'] = $co_production_partners;

        return $this;
    }

    /**
     * Gets costume
     *
     * @return string
     */
    public function getCostume()
    {
        return $this->container['costume'];
    }

    /**
     * Sets costume
     *
     * @param string $costume costume
     *
     * @return $this
     */
    public function setCostume($costume)
    {
        $this->container['costume'] = $costume;

        return $this;
    }

    /**
     * Gets editing
     *
     * @return string
     */
    public function getEditing()
    {
        return $this->container['editing'];
    }

    /**
     * Sets editing
     *
     * @param string $editing editing
     *
     * @return $this
     */
    public function setEditing($editing)
    {
        $this->container['editing'] = $editing;

        return $this;
    }

    /**
     * Gets makeup
     *
     * @return string
     */
    public function getMakeup()
    {
        return $this->container['makeup'];
    }

    /**
     * Sets makeup
     *
     * @param string $makeup makeup
     *
     * @return $this
     */
    public function setMakeup($makeup)
    {
        $this->container['makeup'] = $makeup;

        return $this;
    }

    /**
     * Gets music
     *
     * @return string
     */
    public function getMusic()
    {
        return $this->container['music'];
    }

    /**
     * Sets music
     *
     * @param string $music music
     *
     * @return $this
     */
    public function setMusic($music)
    {
        $this->container['music'] = $music;

        return $this;
    }

    /**
     * Gets other_available_formats
     *
     * @return string
     */
    public function getOtherAvailableFormats()
    {
        return $this->container['other_available_formats'];
    }

    /**
     * Sets other_available_formats
     *
     * @param string $other_available_formats other_available_formats
     *
     * @return $this
     */
    public function setOtherAvailableFormats($other_available_formats)
    {
        $this->container['other_available_formats'] = $other_available_formats;

        return $this;
    }

    /**
     * Gets other_name
     *
     * @return string
     */
    public function getOtherName()
    {
        return $this->container['other_name'];
    }

    /**
     * Sets other_name
     *
     * @param string $other_name other_name
     *
     * @return $this
     */
    public function setOtherName($other_name)
    {
        $this->container['other_name'] = $other_name;

        return $this;
    }

    /**
     * Gets other_role
     *
     * @return string
     */
    public function getOtherRole()
    {
        return $this->container['other_role'];
    }

    /**
     * Sets other_role
     *
     * @param string $other_role other_role
     *
     * @return $this
     */
    public function setOtherRole($other_role)
    {
        $this->container['other_role'] = $other_role;

        return $this;
    }

    /**
     * Gets photography
     *
     * @return string
     */
    public function getPhotography()
    {
        return $this->container['photography'];
    }

    /**
     * Sets photography
     *
     * @param string $photography photography
     *
     * @return $this
     */
    public function setPhotography($photography)
    {
        $this->container['photography'] = $photography;

        return $this;
    }

    /**
     * Gets release_format
     *
     * @return string
     */
    public function getReleaseFormat()
    {
        return $this->container['release_format'];
    }

    /**
     * Sets release_format
     *
     * @param string $release_format release_format
     *
     * @return $this
     */
    public function setReleaseFormat($release_format)
    {
        $this->container['release_format'] = $release_format;

        return $this;
    }

    /**
     * Gets running_time_film
     *
     * @return string
     */
    public function getRunningTimeFilm()
    {
        return $this->container['running_time_film'];
    }

    /**
     * Sets running_time_film
     *
     * @param string $running_time_film running_time_film
     *
     * @return $this
     */
    public function setRunningTimeFilm($running_time_film)
    {
        $this->container['running_time_film'] = $running_time_film;

        return $this;
    }

    /**
     * Gets running_time_series
     *
     * @return string
     */
    public function getRunningTimeSeries()
    {
        return $this->container['running_time_series'];
    }

    /**
     * Sets running_time_series
     *
     * @param string $running_time_series running_time_series
     *
     * @return $this
     */
    public function setRunningTimeSeries($running_time_series)
    {
        $this->container['running_time_series'] = $running_time_series;

        return $this;
    }

    /**
     * Gets flemish_producer_text
     *
     * @return string
     */
    public function getFlemishProducerText()
    {
        return $this->container['flemish_producer_text'];
    }

    /**
     * Sets flemish_producer_text
     *
     * @param string $flemish_producer_text flemish_producer_text
     *
     * @return $this
     */
    public function setFlemishProducerText($flemish_producer_text)
    {
        $this->container['flemish_producer_text'] = $flemish_producer_text;

        return $this;
    }

    /**
     * Gets sound
     *
     * @return string
     */
    public function getSound()
    {
        return $this->container['sound'];
    }

    /**
     * Sets sound
     *
     * @param string $sound sound
     *
     * @return $this
     */
    public function setSound($sound)
    {
        $this->container['sound'] = $sound;

        return $this;
    }

    /**
     * Gets sound_format
     *
     * @return string
     */
    public function getSoundFormat()
    {
        return $this->container['sound_format'];
    }

    /**
     * Sets sound_format
     *
     * @param string $sound_format sound_format
     *
     * @return $this
     */
    public function setSoundFormat($sound_format)
    {
        $this->container['sound_format'] = $sound_format;

        return $this;
    }

    /**
     * Gets supported_by
     *
     * @return string
     */
    public function getSupportedBy()
    {
        return $this->container['supported_by'];
    }

    /**
     * Sets supported_by
     *
     * @param string $supported_by supported_by
     *
     * @return $this
     */
    public function setSupportedBy($supported_by)
    {
        $this->container['supported_by'] = $supported_by;

        return $this;
    }

    /**
     * Gets synopsis_dutch
     *
     * @return string
     */
    public function getSynopsisDutch()
    {
        return $this->container['synopsis_dutch'];
    }

    /**
     * Sets synopsis_dutch
     *
     * @param string $synopsis_dutch synopsis_dutch
     *
     * @return $this
     */
    public function setSynopsisDutch($synopsis_dutch)
    {
        $this->container['synopsis_dutch'] = $synopsis_dutch;

        return $this;
    }

    /**
     * Gets synopsis_english
     *
     * @return string
     */
    public function getSynopsisEnglish()
    {
        return $this->container['synopsis_english'];
    }

    /**
     * Sets synopsis_english
     *
     * @param string $synopsis_english synopsis_english
     *
     * @return $this
     */
    public function setSynopsisEnglish($synopsis_english)
    {
        $this->container['synopsis_english'] = $synopsis_english;

        return $this;
    }

    /**
     * Gets synopsis_french
     *
     * @return string
     */
    public function getSynopsisFrench()
    {
        return $this->container['synopsis_french'];
    }

    /**
     * Sets synopsis_french
     *
     * @param string $synopsis_french synopsis_french
     *
     * @return $this
     */
    public function setSynopsisFrench($synopsis_french)
    {
        $this->container['synopsis_french'] = $synopsis_french;

        return $this;
    }

    /**
     * Gets synopsis_is_other
     *
     * @return string
     */
    public function getSynopsisIsOther()
    {
        return $this->container['synopsis_is_other'];
    }

    /**
     * Sets synopsis_is_other
     *
     * @param string $synopsis_is_other synopsis_is_other
     *
     * @return $this
     */
    public function setSynopsisIsOther($synopsis_is_other)
    {
        $this->container['synopsis_is_other'] = $synopsis_is_other;

        return $this;
    }

    /**
     * Gets tax_shelter_partners
     *
     * @return string
     */
    public function getTaxShelterPartners()
    {
        return $this->container['tax_shelter_partners'];
    }

    /**
     * Sets tax_shelter_partners
     *
     * @param string $tax_shelter_partners tax_shelter_partners
     *
     * @return $this
     */
    public function setTaxShelterPartners($tax_shelter_partners)
    {
        $this->container['tax_shelter_partners'] = $tax_shelter_partners;

        return $this;
    }

    /**
     * Gets writers_text
     *
     * @return string
     */
    public function getWritersText()
    {
        return $this->container['writers_text'];
    }

    /**
     * Sets writers_text
     *
     * @param string $writers_text writers_text
     *
     * @return $this
     */
    public function setWritersText($writers_text)
    {
        $this->container['writers_text'] = $writers_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
